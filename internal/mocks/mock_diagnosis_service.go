// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/diagnosis/service.go
//
// Generated by this command:
//
//	mockgen --source=internal/service/diagnosis/service.go --destination=internal/mocks/mock_diagnosis_service.go --package=mocks --mock_names=repository=MockDiagnosisRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	diagnosis "github.com/nachoconques0/diagnosis_svc/internal/entity/diagnosis"
	query "github.com/nachoconques0/diagnosis_svc/internal/helpers/query"
	gomock "go.uber.org/mock/gomock"
)

// MockDiagnosisRepository is a mock of repository interface.
type MockDiagnosisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDiagnosisRepositoryMockRecorder
	isgomock struct{}
}

// MockDiagnosisRepositoryMockRecorder is the mock recorder for MockDiagnosisRepository.
type MockDiagnosisRepositoryMockRecorder struct {
	mock *MockDiagnosisRepository
}

// NewMockDiagnosisRepository creates a new mock instance.
func NewMockDiagnosisRepository(ctrl *gomock.Controller) *MockDiagnosisRepository {
	mock := &MockDiagnosisRepository{ctrl: ctrl}
	mock.recorder = &MockDiagnosisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiagnosisRepository) EXPECT() *MockDiagnosisRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDiagnosisRepository) Create(ctx context.Context, d *diagnosis.Entity) (*diagnosis.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, d)
	ret0, _ := ret[0].(*diagnosis.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDiagnosisRepositoryMockRecorder) Create(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDiagnosisRepository)(nil).Create), ctx, d)
}

// Find mocks base method.
func (m *MockDiagnosisRepository) Find(ctx context.Context, filters query.DiagnosisFilters, pagination query.Pagination) ([]diagnosis.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filters, pagination)
	ret0, _ := ret[0].([]diagnosis.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDiagnosisRepositoryMockRecorder) Find(ctx, filters, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDiagnosisRepository)(nil).Find), ctx, filters, pagination)
}
