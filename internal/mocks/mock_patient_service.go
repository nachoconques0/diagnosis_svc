// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/patient/service.go
//
// Generated by this command:
//
//	mockgen --source=internal/service/patient/service.go --destination=internal/mocks/mock_patient_service.go --package=mocks --mock_names=repository=MockPatientRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	patient "github.com/nachoconques0/diagnosis_svc/internal/entity/patient"
	query "github.com/nachoconques0/diagnosis_svc/internal/helpers/query"
	gomock "go.uber.org/mock/gomock"
)

// MockPatientRepository is a mock of repository interface.
type MockPatientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPatientRepositoryMockRecorder
	isgomock struct{}
}

// MockPatientRepositoryMockRecorder is the mock recorder for MockPatientRepository.
type MockPatientRepositoryMockRecorder struct {
	mock *MockPatientRepository
}

// NewMockPatientRepository creates a new mock instance.
func NewMockPatientRepository(ctrl *gomock.Controller) *MockPatientRepository {
	mock := &MockPatientRepository{ctrl: ctrl}
	mock.recorder = &MockPatientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientRepository) EXPECT() *MockPatientRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPatientRepository) Create(ctx context.Context, p *patient.Entity) (*patient.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p)
	ret0, _ := ret[0].(*patient.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPatientRepositoryMockRecorder) Create(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPatientRepository)(nil).Create), ctx, p)
}

// Find mocks base method.
func (m *MockPatientRepository) Find(ctx context.Context, filters query.DiagnosisFilters, pagination query.Pagination) ([]patient.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filters, pagination)
	ret0, _ := ret[0].([]patient.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPatientRepositoryMockRecorder) Find(ctx, filters, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPatientRepository)(nil).Find), ctx, filters, pagination)
}
