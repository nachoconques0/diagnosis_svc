// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/diagnosis/controller.go
//
// Generated by this command:
//
//	mockgen --source=internal/controller/diagnosis/controller.go --destination=internal/mocks/mock_diagnosis_controller.go --package=mocks --mock_names=service=MockDiagnosisService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	query "github.com/nachoconques0/diagnosis_svc/internal/helpers/query"
	model "github.com/nachoconques0/diagnosis_svc/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDiagnosisService is a mock of service interface.
type MockDiagnosisService struct {
	ctrl     *gomock.Controller
	recorder *MockDiagnosisServiceMockRecorder
	isgomock struct{}
}

// MockDiagnosisServiceMockRecorder is the mock recorder for MockDiagnosisService.
type MockDiagnosisServiceMockRecorder struct {
	mock *MockDiagnosisService
}

// NewMockDiagnosisService creates a new mock instance.
func NewMockDiagnosisService(ctrl *gomock.Controller) *MockDiagnosisService {
	mock := &MockDiagnosisService{ctrl: ctrl}
	mock.recorder = &MockDiagnosisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiagnosisService) EXPECT() *MockDiagnosisServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDiagnosisService) Create(ctx context.Context, req model.CreateDiagnosisRequest) (*model.DiagnosisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*model.DiagnosisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDiagnosisServiceMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDiagnosisService)(nil).Create), ctx, req)
}

// Find mocks base method.
func (m *MockDiagnosisService) Find(ctx context.Context, filters query.DiagnosisFilters, pagination query.Pagination) ([]model.DiagnosisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filters, pagination)
	ret0, _ := ret[0].([]model.DiagnosisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDiagnosisServiceMockRecorder) Find(ctx, filters, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDiagnosisService)(nil).Find), ctx, filters, pagination)
}
